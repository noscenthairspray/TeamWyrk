[debug] [2024-01-03T21:59:39.236Z] ----------------------------------------------------------------------
[debug] [2024-01-03T21:59:39.239Z] Command:       C:\Program Files\nodejs\node.exe C:\Program Files\nodejs\node_modules\firebase-tools\lib\bin\firebase.js ext:install firebase/firestore-send-email --project=
[debug] [2024-01-03T21:59:39.239Z] CLI Version:   12.9.1
[debug] [2024-01-03T21:59:39.240Z] Platform:      win32
[debug] [2024-01-03T21:59:39.240Z] Node Version:  v20.10.0
[debug] [2024-01-03T21:59:39.240Z] Time:          Wed Jan 03 2024 13:59:39 GMT-0800 (Pacific Standard Time)
[debug] [2024-01-03T21:59:39.240Z] ----------------------------------------------------------------------
[debug] 
[debug] [2024-01-03T21:59:39.334Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2024-01-03T21:59:39.335Z] > authorizing via signed-in user (vtu7410@gmail.com)
[debug] [2024-01-03T21:59:39.335Z] [iam] checking project teamwyrk for permissions ["firebase.projects.get","firebaseextensions.instances.create"]
[debug] [2024-01-03T21:59:39.337Z] > refreshing access token with scopes: []
[debug] [2024-01-03T21:59:39.340Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2024-01-03T21:59:39.340Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2024-01-03T21:59:39.566Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2024-01-03T21:59:39.566Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2024-01-03T21:59:39.576Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/teamwyrk:testIamPermissions [none]
[debug] [2024-01-03T21:59:39.577Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/teamwyrk:testIamPermissions x-goog-quota-user=projects/teamwyrk
[debug] [2024-01-03T21:59:39.577Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/teamwyrk:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[debug] [2024-01-03T21:59:39.882Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/teamwyrk:testIamPermissions 200
[debug] [2024-01-03T21:59:39.882Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/teamwyrk:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2024-01-03T21:59:39.884Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/teamwyrk/services/firebaseextensions.googleapis.com [none]
[debug] [2024-01-03T21:59:39.884Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/teamwyrk/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/teamwyrk
[debug] [2024-01-03T21:59:40.421Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/teamwyrk/services/firebaseextensions.googleapis.com 200
[debug] [2024-01-03T21:59:40.421Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/teamwyrk/services/firebaseextensions.googleapis.com [omitted]
[info] +  extensions: required API firebaseextensions.googleapis.com is enabled 
[debug] [2024-01-03T21:59:40.424Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/teamwyrk [none]
[debug] [2024-01-03T21:59:40.706Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/teamwyrk 200
[debug] [2024-01-03T21:59:40.706Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/teamwyrk {"projectId":"teamwyrk","projectNumber":"923269802647","displayName":"Teamwyrk","name":"projects/teamwyrk","resources":{"hostingSite":"teamwyrk","storageBucket":"teamwyrk.appspot.com","locationId":"us-central"},"state":"ACTIVE","etag":"1_6ccde656-e9f5-4771-838c-10cd36df7e61"}
[info] i  extensions: Checking project IAM policy... 
[debug] [2024-01-03T21:59:40.708Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/projects/teamwyrk/instances pageSize=100&pageToken=
[debug] [2024-01-03T21:59:41.282Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/projects/teamwyrk/instances 200
[debug] [2024-01-03T21:59:41.283Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/projects/teamwyrk/instances {"instances":[{"name":"projects/teamwyrk/instances/firestore-send-email","createTime":"2023-07-19T15:21:25.829571Z","updateTime":"2023-08-28T21:44:40.524672Z","state":"ACTIVE","config":{"name":"projects/teamwyrk/instances/firestore-send-email/configurations/fe383b7f-2092-43db-970b-91f747e6f919","createTime":"2023-08-28T21:40:54.162576Z","source":{"name":"projects/firebaseextensions/sources/578acedc-c516-400e-9755-cd78a79f7e15","packageUri":"https://storage.googleapis.com/firebase-extensions-packages-prod/firebase-firestore-send-email-0.1.27-a06a6b10-80d3-4381-bd3d-a0eff8a5678e.zip","hash":"2ef03fa6b7c5f2c3140d872dedf967cbd02cd3ba971bd49f9d5251a0e49b1753","extensionRoot":"/","spec":{"specVersion":"v1beta","name":"firestore-send-email","version":"0.1.27","description":"Composes and sends an email based on the contents of a document written to a specified Cloud Firestore collection.","roles":[{"role":"datastore.user","reason":"Allows this extension to access Cloud Firestore to read and process added email documents."}],"resources":[{"name":"processQueue","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.write\n  resource: projects/${param:PROJECT_ID}/databases/(default)/documents/${param:MAIL_COLLECTION}/{id}\nruntime: nodejs18\n","description":"Processes document changes in the specified Cloud Firestore collection, delivers emails, and updates the document with delivery status information.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Firebase","url":"https://firebase.google.com"},"contributors":[{"authorName":"Michael Bleigh","url":"https://github.com/mbleigh"},{"authorName":"Invertase","email":"oss@invertase.io","url":"https://github.com/invertase"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/firebase/extensions/blob/master/firestore-send-email/CHANGELOG.md","sourceUrl":"https://github.com/firebase/extensions/tree/master/firestore-send-email","params":[{"param":"SMTP_CONNECTION_URI","label":"SMTP connection URI","type":"STRING","description":"A URI representing an SMTP server this extension can use to deliver email. Note that port 25 is blocked by Google Cloud Platform, so we recommend using port 587 for SMTP connections. If you're using the SMTPS protocol, we recommend using port 465. In order to keep passwords secure, it is recommended to omit the password from the connection string while using the `SMTP Password` field for entering secrets and passwords. Passwords and secrets should now be included in `SMTP password` field.\nSecure format:\n `smtps://username@gmail.com@smtp.gmail.com:465` (username only)\n `smtps://smtp.gmail.com:465` (No username and password)\nBackwards Compatible (less secure):\n `smtps://username@gmail.com:password@smtp.gmail.com:465`. (username and password)","required":true,"example":"smtps://username@smtp.hostname.com:465","validationRegex":"^(smtp[s]*://.*?:[0-9]+.*$)","validationErrorMessage":"Invalid SMTP connection URI. Must be in the form `smtp(s)://username:password@hostname:port` or `smtp(s)://username@hostname:port`."},{"param":"SMTP_PASSWORD","label":"SMTP password","type":"SECRET","description":"User password for the SMTP server"},{"param":"MAIL_COLLECTION","label":"Email documents collection","type":"STRING","description":"What is the path to the collection that contains the documents used to build and send the emails?","required":true,"default":"mail","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Must be a valid Cloud Firestore collection"},{"param":"DEFAULT_FROM","label":"Default FROM address","type":"STRING","description":"The email address to use as the sender's address (if it's not specified in the added email document).  You can optionally include a name with the email address (`Friendly Firebaser <foobar@example.com>`).","required":true,"example":"foobar@example.com","validationRegex":"^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$|^.*<(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})>$","validationErrorMessage":"Must be a valid email address or valid name plus email address"},{"param":"DEFAULT_REPLY_TO","label":"Default REPLY-TO address","type":"STRING","description":"The email address to use as the reply-to address (if it's not specified in the added email document)."},{"param":"USERS_COLLECTION","label":"Users collection","type":"STRING","description":"A collection of documents keyed by user UID. If the `toUids`, `ccUids`, and/or `bccUids` recipient options are used in the added email document, this extension delivers email to the `email` field based on lookups in this collection."},{"param":"TEMPLATES_COLLECTION","label":"Templates collection","type":"STRING","description":"A collection of email templates keyed by name. This extension can render an email using a [Handlebar](https://handlebarsjs.com/) template, if the template is specified in the added email document."},{"param":"TTL_EXPIRE_TYPE","label":"Firestore TTL type","type":"SELECT","description":"Do you want the firestore records to be marked with an expireAt field for a TTL policy? If \"Never\" is selected then no expireAt field will be added. Otherwise you may specify the unit of time specified by the TTL_EXPIRE_VALUE parameter. Defaults to \"Never\".","required":true,"options":[{"value":"never","label":"Never"},{"value":"hour","label":"Hour"},{"value":"day","label":"Day"},{"value":"week","label":"Week"},{"value":"month","label":"Month"},{"value":"year","label":"Year"}],"default":"never"},{"param":"TTL_EXPIRE_VALUE","label":"Firestore TTL value","type":"STRING","description":"In the units specified by TTL_EXPIRE_TYPE, how long do you want records to be ineligible for deletion by a TTL policy? This parameter requires the Firestore TTL type parameter to be set to a value other than `Never`. For example, if `Firestore TTL type` is set to `Day` then setting this parameter to `1` will specify a TTL of 1 day.","required":true,"default":"1","validationRegex":"^[1-9][0-9]*$","validationErrorMessage":"The value must be an integer value greater than zero."}],"preinstallContent":"Use this extension to render and send emails that contain the information from documents added to a specified Cloud Firestore collection.\n\nAdding a document triggers this extension to send an email built from the document's fields. The document's top-level fields specify the email sender and recipients, including `to`, `cc`, and `bcc` options (each supporting UIDs). The document's `message` field specifies the other email elements, like subject line and email body (either plaintext or HTML)\n\nHere's a basic example document write that would trigger this extension:\n\n```js\nadmin.firestore().collection('mail').add({\n  to: 'someone@example.com',\n  message: {\n    subject: 'Hello from Firebase!',\n    html: 'This is an <code>HTML</code> email body.',\n  },\n})\n```\n\nYou can also optionally configure this extension to render emails using [Handlebar](https://handlebarsjs.com/) templates. Each template is a document stored in a Cloud Firestore collection.\n\nWhen you configure this extension, you'll need to supply your **SMTP credentials for mail delivery**. Note that this extension is for use with bulk email service providers, like SendGrid, Mailgun, etc.\n\n#### Setup Google App Passwords\n\n**Google** no longer allows **Gmail** users to use their own passwords to authorize third-party apps and services. Instead, you have to use the [Sign in with App Passwords](https://support.google.com/accounts/answer/185833) service to generate a special password for each app you want to authorize. To do so:\n\n1.  Go to your [Google Account](https://myaccount.google.com/).\n2.  Select **Security**.\n3.  Under \"Signing in to Google,\" select **App Passwords**. You may need to sign in. If you don’t have this option, it might be because:\n    1.  2-Step Verification is not set up for your account.\n    2.  2-Step Verification is only set up for security keys.\n    3.  Your account is through work, school, or other organization.\n    4.  You turned on Advanced Protection.\n4.  At the bottom, choose **Select app** and choose **Other** option and then write the name of the app password (e.g. `Firebase Trigger Email from Firestore Extension`) and click **Generate**.\n5.  Follow the instructions to enter the App Password. The App Password is the 16-character code in the yellow bar on your device.\n6.  Tap **Done**.\n\nNow you can use your Google username with the generated password to authorize the extension.\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've [set up a Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) in your Firebase project.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n  - Cloud Firestore\n  - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n\nUsage of this extension also requires you to have SMTP credentials for mail delivery. You are responsible for any associated costs with your usage of your SMTP provider.\n\n#### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)","postinstallContent":"### See it in action\n\nYou can test out this extension right away!\n\n1.  Go to your [Cloud Firestore dashboard](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/data) in the Firebase console.\n\n1.  If it doesn't already exist, create the collection you specified during installation: `${param:MAIL_COLLECTION}`.\n\n1.  Add a document with a `to` field and a `message` field with the following content:\n\n    ```js\n    to: ['someone@example.com'],\n    message: {\n      subject: 'Hello from Firebase!',\n      text: 'This is the plaintext section of the email body.',\n      html: 'This is the <code>HTML</code> section of the email body.',\n    }\n    ```\n\n1.  In a few seconds, you'll see a `delivery` field appear in the document. The field will update as the extension processes the email.\n\n**Note:** You can also use the [Firebase Admin SDK][admin_sdk] to add a document:\n\n```js\nadmin\n  .firestore()\n  .collection(\"${param:MAIL_COLLECTION}\")\n  .add({\n    to: \"someone@example.com\",\n    message: {\n      subject: \"Hello from Firebase!\",\n      text: \"This is the plaintext section of the email body.\",\n      html: \"This is the <code>HTML</code> section of the email body.\",\n    },\n  })\n  .then(() => console.log(\"Queued email for delivery!\"));\n```\n\n### Using this extension\n\nSee the [official documentation](https://firebase.google.com/docs/extensions/official/firestore-send-email) for information on using this extension, including advanced use cases such as using Handlebars templates and managing email delivery status.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\n[mail_collection]: https://console.firebase.google.com/project/_/firestore/data~2F${param:MAIL_COLLECTION}\n[admin_sdk]: https://firebase.google.com/docs/admin/setup\n[amp4email]: https://amp.dev/documentation/guides-and-tutorials/learn/email-spec/amp-email-format/\n[handlebars]: https://handlebarsjs.com/\n\n### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)","readmeContent":"# Trigger Email from Firestore\n\n**Author**: Firebase (**[https://firebase.google.com](https://firebase.google.com)**)\n\n**Description**: Composes and sends an email based on the contents of a document written to a specified Cloud Firestore collection.\n\n\n\n**Details**: Use this extension to render and send emails that contain the information from documents added to a specified Cloud Firestore collection.\n\nAdding a document triggers this extension to send an email built from the document's fields. The document's top-level fields specify the email sender and recipients, including `to`, `cc`, and `bcc` options (each supporting UIDs). The document's `message` field specifies the other email elements, like subject line and email body (either plaintext or HTML)\n\nHere's a basic example document write that would trigger this extension:\n\n```js\nadmin.firestore().collection('mail').add({\n  to: 'someone@example.com',\n  message: {\n    subject: 'Hello from Firebase!',\n    html: 'This is an <code>HTML</code> email body.',\n  },\n})\n```\n\nYou can also optionally configure this extension to render emails using [Handlebar](https://handlebarsjs.com/) templates. Each template is a document stored in a Cloud Firestore collection.\n\nWhen you configure this extension, you'll need to supply your **SMTP credentials for mail delivery**. Note that this extension is for use with bulk email service providers, like SendGrid, Mailgun, etc.\n\n#### Setup Google App Passwords\n\n**Google** no longer allows **Gmail** users to use their own passwords to authorize third-party apps and services. Instead, you have to use the [Sign in with App Passwords](https://support.google.com/accounts/answer/185833) service to generate a special password for each app you want to authorize. To do so:\n\n1.  Go to your [Google Account](https://myaccount.google.com/).\n2.  Select **Security**.\n3.  Under \"Signing in to Google,\" select **App Passwords**. You may need to sign in. If you don’t have this option, it might be because:\n    1.  2-Step Verification is not set up for your account.\n    2.  2-Step Verification is only set up for security keys.\n    3.  Your account is through work, school, or other organization.\n    4.  You turned on Advanced Protection.\n4.  At the bottom, choose **Select app** and choose **Other** option and then write the name of the app password (e.g. `Firebase Trigger Email from Firestore Extension`) and click **Generate**.\n5.  Follow the instructions to enter the App Password. The App Password is the 16-character code in the yellow bar on your device.\n6.  Tap **Done**.\n\nNow you can use your Google username with the generated password to authorize the extension.\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've [set up a Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) in your Firebase project.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n  - Cloud Firestore\n  - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n\nUsage of this extension also requires you to have SMTP credentials for mail delivery. You are responsible for any associated costs with your usage of your SMTP provider.\n\n#### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* SMTP connection URI: A URI representing an SMTP server this extension can use to deliver email. Note that port 25 is blocked by Google Cloud Platform, so we recommend using port 587 for SMTP connections. If you're using the SMTPS protocol, we recommend using port 465. In order to keep passwords secure, it is recommended to omit the password from the connection string while using the `SMTP Password` field for entering secrets and passwords. Passwords and secrets should now be included in `SMTP password` field.\nSecure format:\n `smtps://username@gmail.com@smtp.gmail.com:465` (username only)\n `smtps://smtp.gmail.com:465` (No username and password)\nBackwards Compatible (less secure):\n `smtps://username@gmail.com:password@smtp.gmail.com:465`. (username and password)\n\n* SMTP password: User password for the SMTP server\n\n* Email documents collection: What is the path to the collection that contains the documents used to build and send the emails?\n\n* Default FROM address: The email address to use as the sender's address (if it's not specified in the added email document).  You can optionally include a name with the email address (`Friendly Firebaser <foobar@example.com>`).\n\n* Default REPLY-TO address: The email address to use as the reply-to address (if it's not specified in the added email document).\n\n* Users collection: A collection of documents keyed by user UID. If the `toUids`, `ccUids`, and/or `bccUids` recipient options are used in the added email document, this extension delivers email to the `email` field based on lookups in this collection.\n\n* Templates collection: A collection of email templates keyed by name. This extension can render an email using a [Handlebar](https://handlebarsjs.com/) template, if the template is specified in the added email document.\n\n* Firestore TTL type: Do you want the firestore records to be marked with an expireAt field for a TTL policy? If \"Never\" is selected then no expireAt field will be added. Otherwise you may specify the unit of time specified by the TTL_EXPIRE_VALUE parameter. Defaults to \"Never\".\n\n* Firestore TTL value: In the units specified by TTL_EXPIRE_TYPE, how long do you want records to be ineligible for deletion by a TTL policy? This parameter requires the Firestore TTL type parameter to be set to a value other than `Never`. For example, if `Firestore TTL type` is set to `Day` then setting this parameter to `1` will specify a TTL of 1 day.\n\n\n\n**Cloud Functions:**\n\n* **processQueue:** Processes document changes in the specified Cloud Firestore collection, delivers emails, and updates the document with delivery status information.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* datastore.user (Reason: Allows this extension to access Cloud Firestore to read and process added email documents.)\n","displayName":"Trigger Email from Firestore","events":[{"type":"firebase.extensions.firestore-send-email.v1.onStart","description":"Occurs when the extension starts execution."},{"type":"firebase.extensions.firestore-send-email.v1.onProcessing","description":"Occurs when the extension attempts to process an email."},{"type":"firebase.extensions.firestore-send-email.v1.onRetry","description":"Occurs when the extension attempts to resend an email."},{"type":"firebase.extensions.firestore-send-email.v1.onPending","description":"Occurs when an email has a pending status."},{"type":"firebase.extensions.firestore-send-email.v1.onSuccess","description":"Occurs when the extension successfully sends an email."},{"type":"firebase.extensions.firestore-send-email.v1.onComplete","description":"Occurs when the extension completes execution."},{"type":"firebase.extensions.firestore-send-email.v1.onError","description":"Occurs when the extension fails to complete execution."}]},"fetchTime":"2023-07-12T08:13:42.022101Z","lastOperationName":"projects/firebaseextensions/operations/2fa62e55-0c74-4984-974a-0c16e0a635da","state":"ACTIVE"},"params":{"TEMPLATES_COLLECTION":"templates","TTL_EXPIRE_TYPE":"month","TTL_EXPIRE_VALUE":"1","SMTP_CONNECTION_URI":"smtps://team@teamwyrk.org@smtppro.zoho.com:465","SMTP_PASSWORD":"projects/923269802647/secrets/firestore-send-email-SMTP_PASSWORD/versions/1","MAIL_COLLECTION":"mail","DEFAULT_FROM":"<team@teamwyrk.org>","USERS_COLLECTION":"user"},"populatedPostinstallContent":"### See it in action\n\nYou can test out this extension right away!\n\n1.  Go to your [Cloud Firestore dashboard](https://console.firebase.google.com/project/teamwyrk/firestore/data) in the Firebase console.\n\n1.  If it doesn't already exist, create the collection you specified during installation: `mail`.\n\n1.  Add a document with a `to` field and a `message` field with the following content:\n\n    ```js\n    to: ['someone@example.com'],\n    message: {\n      subject: 'Hello from Firebase!',\n      text: 'This is the plaintext section of the email body.',\n      html: 'This is the <code>HTML</code> section of the email body.',\n    }\n    ```\n\n1.  In a few seconds, you'll see a `delivery` field appear in the document. The field will update as the extension processes the email.\n\n**Note:** You can also use the [Firebase Admin SDK][admin_sdk] to add a document:\n\n```js\nadmin\n  .firestore()\n  .collection(\"mail\")\n  .add({\n    to: \"someone@example.com\",\n    message: {\n      subject: \"Hello from Firebase!\",\n      text: \"This is the plaintext section of the email body.\",\n      html: \"This is the <code>HTML</code> section of the email body.\",\n    },\n  })\n  .then(() => console.log(\"Queued email for delivery!\"));\n```\n\n### Using this extension\n\nSee the [official documentation](https://firebase.google.com/docs/extensions/official/firestore-send-email) for information on using this extension, including advanced use cases such as using Handlebars templates and managing email delivery status.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\n[mail_collection]: https://console.firebase.google.com/project/_/firestore/data~2Fmail\n[admin_sdk]: https://firebase.google.com/docs/admin/setup\n[amp4email]: https://amp.dev/documentation/guides-and-tutorials/learn/email-spec/amp-email-format/\n[handlebars]: https://handlebarsjs.com/\n\n### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)","extensionRef":"firebase/firestore-send-email","extensionVersion":"0.1.27","systemParams":{"firebaseextensions.v1beta.function/maxInstances":"100","firebaseextensions.v1beta.function/location":"us-central1","firebaseextensions.v1beta.function/memory":"256","firebaseextensions.v1beta.function/vpcConnectorEgressSettings":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","firebaseextensions.v1beta.function/minInstances":"0"}},"lastOperationName":"projects/teamwyrk/operations/2e6cfb11-9d49-4fb6-8ce9-a78903ace835","serviceAccountEmail":"ext-firestore-send-email@teamwyrk.iam.gserviceaccount.com","lastOperationType":"CONFIGURE","etag":"dc4e1f0dc7990fb8777a91d0fa6b906f25fb6821198d850a441ae0f3f31fb54e"},{"name":"projects/teamwyrk/instances/delete-user-data","createTime":"2023-07-09T03:09:50.405488Z","updateTime":"2023-08-09T18:36:02.232728Z","state":"ACTIVE","config":{"name":"projects/teamwyrk/instances/delete-user-data/configurations/2df08276-28ed-4563-ac74-377c97fe7278","createTime":"2023-08-09T18:31:55.908980Z","source":{"name":"projects/firebaseextensions/sources/98db21a5-88d7-4071-82e5-5834983b4e5f","packageUri":"https://storage.googleapis.com/firebase-extensions-packages-prod/firebase-delete-user-data-0.1.19-1cb7b3a8-d43b-4cad-9ade-1d9310ee326a.zip","hash":"ab53dc74db43f6b61ca260166394d882206fa11c205e9d4646eecd5aebc9071a","extensionRoot":"/","spec":{"specVersion":"v1beta","name":"delete-user-data","version":"0.1.19","description":"Deletes data keyed on a userId from Cloud Firestore, Realtime Database, or Cloud Storage when a user deletes their account.","roles":[{"role":"datastore.owner","reason":"Allows the extension to delete (user) data from Cloud Firestore."},{"role":"firebasedatabase.admin","reason":"Allows the extension to delete (user) data from Realtime Database."},{"role":"storage.admin","reason":"Allows the extension to delete (user) data from Cloud Storage."},{"role":"pubsub.admin","reason":"Allows the extension to publish and subscribe to PubSub events. The extension uses PubSub to parallelize deletion and data discovery, no PubSub data is deleted."}],"resources":[{"name":"clearData","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${param:PROJECT_ID}\nruntime: nodejs18\n","description":"Listens for user accounts to be deleted from your project's authenticated users, then removes any associated user data (based on Firebase Authentication's User ID) from Realtime Database, Cloud Firestore, and/or Cloud Storage.","deletionPolicy":"DELETE"},{"name":"handleSearch","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: google.pubsub.topic.publish\n  resource: projects/${PROJECT_ID}/topics/ext-${EXT_INSTANCE_ID}-discovery\nruntime: nodejs18\n","deletionPolicy":"DELETE"},{"name":"handleDeletion","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: google.pubsub.topic.publish\n  resource: projects/${PROJECT_ID}/topics/ext-${EXT_INSTANCE_ID}-deletion\nruntime: nodejs18\n","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Firebase","url":"https://firebase.google.com"},"contributors":[{"authorName":"Lauren Long","url":"https://github.com/laurenzlong"},{"authorName":"Chris Bianca","email":"chris@csfrequency.com","url":"https://github.com/chrisbianca"},{"authorName":"Invertase","email":"oss@invertase.io","url":"https://github.com/invertase"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/firebase/extensions/blob/master/delete-user-data/CHANGELOG.md","sourceUrl":"https://github.com/firebase/extensions/tree/master/delete-user-data","params":[{"param":"FIRESTORE_PATHS","label":"Cloud Firestore paths","type":"STRING","description":"Which paths in your Cloud Firestore instance contain data keyed on a user ID? Leave empty if you don't use Cloud Firestore.\nEnter the full paths, separated by commas. Use `{UID}` as a placeholder for the user's UID.\nFor example, if you have the collections `users` and `admins`, and each collection has documents with User ID as document IDs, then enter `users/{UID},admins/{UID}`.","example":"users/{UID},admins/{UID}"},{"param":"FIRESTORE_DELETE_MODE","label":"Cloud Firestore delete mode","type":"SELECT","description":"(Only applicable if you use the `Cloud Firestore paths` parameter.) How do you want to delete Cloud Firestore documents? To also delete documents in subcollections, set this parameter to `recursive`.","required":true,"options":[{"value":"recursive","label":"Recursive"},{"value":"shallow","label":"Shallow"}],"default":"shallow"},{"param":"SELECTED_DATABASE_INSTANCE","label":"Realtime Database instance","type":"STRING","description":"From which Realtime Database instance do you want to delete data keyed on a user ID?\n","example":"my-instance","validationRegex":"^([0-9a-z_.-]*)$","validationErrorMessage":"Invalid database instance"},{"param":"SELECTED_DATABASE_LOCATION","label":"Realtime Database location","type":"SELECT","description":"(Only applicable if you provided the `Realtime Database instance` parameter.) From which Realtime Database location do you want to delete data keyed on a user ID?\n","options":[{"value":"us-central1","label":"United States"},{"value":"europe-west1","label":"Belgium"},{"value":"asia-southeast1","label":"Singapore"}],"default":"us-central1"},{"param":"RTDB_PATHS","label":"Realtime Database paths","type":"STRING","description":"Which paths in your Realtime Database instance contain data keyed on a user ID? Leave empty if you don't use Realtime Database.\nEnter the full paths, separated by commas. Use `{UID}` as a placeholder for the user's UID.\nFor example: `users/{UID},admins/{UID}`.","example":"users/{UID},admins/{UID}"},{"param":"CLOUD_STORAGE_BUCKET","label":"Cloud Storage bucket","type":"STRING","description":"Which Google Cloud Storage bucket do you want to delete files from?\n","required":true,"default":"${STORAGE_BUCKET}","example":"my-project-12345.appspot.com","validationRegex":"^([0-9a-z_.-]*)$","validationErrorMessage":"Invalid storage bucket"},{"param":"STORAGE_PATHS","label":"Cloud Storage paths","type":"STRING","description":"Where in Google Cloud Storage do you store data keyed on a user ID? Leave empty if you don't use Cloud Storage.\nEnter the full paths to files or directories in your Storage buckets, separated by commas. Use `{UID}` to represent the User ID of the deleted user, and use `{DEFAULT}` to represent your default Storage bucket.\nHere's a series of examples. To delete all the files in your default bucket with the file naming scheme `{UID}-pic.png`, enter `{DEFAULT}/{UID}-pic.png`. To also delete all the files in another bucket called my-app-logs with the file naming scheme `{UID}-logs.txt`, enter `{DEFAULT}/{UID}-pic.png,my-app-logs/{UID}-logs.txt`. To *also* delete a User ID-labeled directory and all its files (like `media/{UID}`), enter `{DEFAULT}/{UID}-pic.png,my-app-logs/{UID}-logs.txt,{DEFAULT}/media/{UID}`.","example":"{DEFAULT}/{UID}-pic.png,my-awesome-app-logs/{UID}-logs.txt"},{"param":"ENABLE_AUTO_DISCOVERY","label":"Enable auto discovery","type":"SELECT","description":"Enable the extension to automatically discover Firestore collections and documents to delete.","required":true,"options":[{"value":"yes","label":"Yes"},{"value":"no","label":"No"}],"default":"no"},{"param":"AUTO_DISCOVERY_SEARCH_DEPTH","label":"Auto discovery search depth","type":"STRING","description":"If auto discovery is enabled, how deep should auto discovery find collections and documents. For example, setting to `1` would only discover root collections and documents, whereas setting to `9` would search sub-collections 9 levels deep. Defaults to `3`.","required":true,"default":"3"},{"param":"AUTO_DISCOVERY_SEARCH_FIELDS","label":"Auto discovery search fields","type":"STRING","description":"If auto discovery is enabled, specify what document fields are used to associate the UID with the document. The extension will delete documents where the value for one or more of these fields matches the deleting user’s UID. If left empty, document fields will not be used in auto discovery.","default":"id,uid,userId"},{"param":"SEARCH_FUNCTION","label":"Search function URL","type":"STRING","description":"Specify a URL to call that will return a list of document paths to delete. The extension will send a `POST` request to the specified `URL`, with the `uid` of the deleted user will be provided in the body of the request. The endpoint specified should return an array of firestore paths to delete.","example":"https://us-west1-my-project-id.cloudfunctions.net/myTransformFunction"}],"preinstallContent":"Use this extension to automatically delete certain data keyed on a user ID when the user is deleted from Firebase Authentication.\n\nYou can configure this extension to delete certain data keyed on a user ID from any or all of the following: Cloud Firestore, Realtime Database, or Cloud Storage. Each trigger of the extension to delete data is keyed to the user's UID.\n\nThis extension has a few different mechanisms for discovering data keyed on a user ID for deletion that you can configure during installation. These are outlined in the [official docs](https://firebase.google.com/docs/extensions/official/delete-user-data) for this extension. The extension will only delete data that it is explicitly configured to delete based on the mechanisms provided.\n\nTo use this extension, you need to manage your users with Firebase Authentication.\n\n**NOTE: This extension may be useful in helping you respect user privacy and fulfill compliance requirements you may be subject to. However, you are responsible for assessing and determining your compliance needs and obligations, and using this extension does not guarantee compliance with government and industry regulations.**\n\n#### Additional setup\n\nDepending on where you'd like to delete user data from, make sure that you've set up [Cloud Firestore](https://firebase.google.com/docs/firestore), [Realtime Database](https://firebase.google.com/docs/database), or [Cloud Storage](https://firebase.google.com/docs/storage) in your Firebase project before installing this extension.\n\nAlso, make sure that you've set up [Firebase Authentication](https://firebase.google.com/docs/auth) to manage your users.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n \n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n  - Cloud Firestore\n  - Firebase Realtime Database\n  - Cloud Storage\n  - Pubsub\n  - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n","postinstallContent":"### See it in action\n\nYou can test out this extension right away!\n\n1.  Go to your [Authentication dashboard](https://console.firebase.google.com/project/${param:PROJECT_ID}/authentication/users) in the Firebase console.\n\n1.  Click **Add User** to add a test user, then copy the test user's UID to your clipboard.\n\n1.  Create a new Cloud Firestore document, a new Realtime Database entry, or upload a new file to Storage - incorporating the user's UID into the path according to the schema that you configured.\n\n1.  Go back to your [Authentication dashboard](https://console.firebase.google.com/project/${param:PROJECT_ID}/authentication/users), then delete the test user.\n\n1.  In a few seconds, the new data you added above will be deleted from Cloud Firestore, Realtime Database, and/or Storage (depending on what you configured).\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","readmeContent":"# Delete User Data\n\n**Author**: Firebase (**[https://firebase.google.com](https://firebase.google.com)**)\n\n**Description**: Deletes data keyed on a userId from Cloud Firestore, Realtime Database, or Cloud Storage when a user deletes their account.\n\n\n\n**Details**: Use this extension to automatically delete certain data keyed on a user ID when the user is deleted from Firebase Authentication.\n\nYou can configure this extension to delete certain data keyed on a user ID from any or all of the following: Cloud Firestore, Realtime Database, or Cloud Storage. Each trigger of the extension to delete data is keyed to the user's UID.\n\nThis extension has a few different mechanisms for discovering data keyed on a user ID for deletion that you can configure during installation. These are outlined in the [official docs](https://firebase.google.com/docs/extensions/official/delete-user-data) for this extension. The extension will only delete data that it is explicitly configured to delete based on the mechanisms provided.\n\nTo use this extension, you need to manage your users with Firebase Authentication.\n\n**NOTE: This extension may be useful in helping you respect user privacy and fulfill compliance requirements you may be subject to. However, you are responsible for assessing and determining your compliance needs and obligations, and using this extension does not guarantee compliance with government and industry regulations.**\n\n#### Additional setup\n\nDepending on where you'd like to delete user data from, make sure that you've set up [Cloud Firestore](https://firebase.google.com/docs/firestore), [Realtime Database](https://firebase.google.com/docs/database), or [Cloud Storage](https://firebase.google.com/docs/storage) in your Firebase project before installing this extension.\n\nAlso, make sure that you've set up [Firebase Authentication](https://firebase.google.com/docs/auth) to manage your users.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n \n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n  - Cloud Firestore\n  - Firebase Realtime Database\n  - Cloud Storage\n  - Pubsub\n  - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions location: Where do you want to deploy the functions created for this extension?  You usually want a location close to your database or Storage bucket. For help selecting a location, refer to the [location selection  guide](https://firebase.google.com/docs/functions/locations).\n\n* Cloud Firestore paths: Which paths in your Cloud Firestore instance contain data keyed on a user ID? Leave empty if you don't use Cloud Firestore.\nEnter the full paths, separated by commas. Use `{UID}` as a placeholder for the user's UID.\nFor example, if you have the collections `users` and `admins`, and each collection has documents with User ID as document IDs, then enter `users/{UID},admins/{UID}`.\n\n* Cloud Firestore delete mode: (Only applicable if you use the `Cloud Firestore paths` parameter.) How do you want to delete Cloud Firestore documents? To also delete documents in subcollections, set this parameter to `recursive`.\n\n* Realtime Database instance: From which Realtime Database instance do you want to delete data keyed on a user ID?\n\n\n* Realtime Database location: (Only applicable if you provided the `Realtime Database instance` parameter.) From which Realtime Database location do you want to delete data keyed on a user ID?\n\n\n* Realtime Database paths: Which paths in your Realtime Database instance contain data keyed on a user ID? Leave empty if you don't use Realtime Database.\nEnter the full paths, separated by commas. Use `{UID}` as a placeholder for the user's UID.\nFor example: `users/{UID},admins/{UID}`.\n\n* Cloud Storage bucket: Which Google Cloud Storage bucket do you want to delete files from?\n\n\n* Cloud Storage paths: Where in Google Cloud Storage do you store data keyed on a user ID? Leave empty if you don't use Cloud Storage.\nEnter the full paths to files or directories in your Storage buckets, separated by commas. Use `{UID}` to represent the User ID of the deleted user, and use `{DEFAULT}` to represent your default Storage bucket.\nHere's a series of examples. To delete all the files in your default bucket with the file naming scheme `{UID}-pic.png`, enter `{DEFAULT}/{UID}-pic.png`. To also delete all the files in another bucket called my-app-logs with the file naming scheme `{UID}-logs.txt`, enter `{DEFAULT}/{UID}-pic.png,my-app-logs/{UID}-logs.txt`. To *also* delete a User ID-labeled directory and all its files (like `media/{UID}`), enter `{DEFAULT}/{UID}-pic.png,my-app-logs/{UID}-logs.txt,{DEFAULT}/media/{UID}`.\n\n* Enable auto discovery: Enable the extension to automatically discover Firestore collections and documents to delete.\n\n* Auto discovery search depth: If auto discovery is enabled, how deep should auto discovery find collections and documents. For example, setting to `1` would only discover root collections and documents, whereas setting to `9` would search sub-collections 9 levels deep. Defaults to `3`.\n\n* Auto discovery search fields: If auto discovery is enabled, specify what document fields are used to associate the UID with the document. The extension will delete documents where the value for one or more of these fields matches the deleting user’s UID. If left empty, document fields will not be used in auto discovery.\n\n* Search function URL: Specify a URL to call that will return a list of document paths to delete. The extension will send a `POST` request to the specified `URL`, with the `uid` of the deleted user will be provided in the body of the request. The endpoint specified should return an array of firestore paths to delete.\n\n\n\n**Cloud Functions:**\n\n* **clearData:** Listens for user accounts to be deleted from your project's authenticated users, then removes any associated user data (based on Firebase Authentication's User ID) from Realtime Database, Cloud Firestore, and/or Cloud Storage.\n\n* **handleSearch:** undefined\n\n* **handleDeletion:** undefined\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* datastore.owner (Reason: Allows the extension to delete (user) data from Cloud Firestore.)\n\n* firebasedatabase.admin (Reason: Allows the extension to delete (user) data from Realtime Database.)\n\n* storage.admin (Reason: Allows the extension to delete (user) data from Cloud Storage.)\n\n* pubsub.admin (Reason: Allows the extension to publish and subscribe to PubSub events. The extension uses PubSub to parallelize deletion and data discovery, no PubSub data is deleted.)\n","displayName":"Delete User Data","events":[{"type":"firebase.extensions.delete-user-data.v1.firestore","description":"Occurs when a set of Firestore paths has been marked for deletion following a delete user trigger."},{"type":"firebase.extensions.delete-user-data.v1.database","description":"Occurs when a set of Realtime Database paths has been marked for deletion following a delete user trigger."},{"type":"firebase.extensions.delete-user-data.v1.storage","description":"Occurs when a set of Storage paths has been marked for deletion following a delete user trigger."}]},"fetchTime":"2023-07-24T09:34:59.806116Z","lastOperationName":"projects/firebaseextensions/operations/24300870-1c46-4a95-a883-c7daa55351de","state":"ACTIVE"},"params":{"CLOUD_STORAGE_BUCKET":"teamwyrk.appspot.com","STORAGE_PATHS":"{DEFAULT}/profile-image/{UID},{DEFAULT}/resume/{UID}","ENABLE_AUTO_DISCOVERY":"yes","AUTO_DISCOVERY_SEARCH_DEPTH":"3","AUTO_DISCOVERY_SEARCH_FIELDS":"id,uid,userId","FIRESTORE_PATHS":"users/{UID},request{UID}","FIRESTORE_DELETE_MODE":"recursive","SELECTED_DATABASE_LOCATION":"us-central1"},"populatedPostinstallContent":"### See it in action\n\nYou can test out this extension right away!\n\n1.  Go to your [Authentication dashboard](https://console.firebase.google.com/project/teamwyrk/authentication/users) in the Firebase console.\n\n1.  Click **Add User** to add a test user, then copy the test user's UID to your clipboard.\n\n1.  Create a new Cloud Firestore document, a new Realtime Database entry, or upload a new file to Storage - incorporating the user's UID into the path according to the schema that you configured.\n\n1.  Go back to your [Authentication dashboard](https://console.firebase.google.com/project/teamwyrk/authentication/users), then delete the test user.\n\n1.  In a few seconds, the new data you added above will be deleted from Cloud Firestore, Realtime Database, and/or Storage (depending on what you configured).\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n","extensionRef":"firebase/delete-user-data","extensionVersion":"0.1.19","systemParams":{"firebaseextensions.v1beta.function/location":"us-central1","firebaseextensions.v1beta.function/memory":"256","firebaseextensions.v1beta.function/vpcConnectorEgressSettings":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","firebaseextensions.v1beta.function/minInstances":"0","firebaseextensions.v1beta.function/maxInstances":"3000"}},"lastOperationName":"projects/teamwyrk/operations/703c1514-a0af-4514-9c4b-b4af94f07cfe","serviceAccountEmail":"ext-delete-user-data@teamwyrk.iam.gserviceaccount.com","lastOperationType":"CONFIGURE","etag":"4d300c11c0f37136f074f570981864f14d9f5faeaabe2d13129b9f57b5b27ce1"}]}
[debug] [2024-01-03T21:59:41.284Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/teamwyrk:getIamPolicy [none]
[debug] [2024-01-03T21:59:41.449Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/teamwyrk:getIamPolicy 200
[debug] [2024-01-03T21:59:41.449Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/teamwyrk:getIamPolicy {"version":1,"etag":"BwYMbWl65xo=","bindings":[{"role":"roles/artifactregistry.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-artifactregistry.iam.gserviceaccount.com"]},{"role":"roles/cloudbuild.builds.builder","members":["serviceAccount:923269802647@cloudbuild.gserviceaccount.com"]},{"role":"roles/cloudbuild.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-cloudbuild.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.admin","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.serviceAgent","members":["serviceAccount:service-923269802647@gcf-admin-robot.iam.gserviceaccount.com"]},{"role":"roles/compute.serviceAgent","members":["serviceAccount:service-923269802647@compute-system.iam.gserviceaccount.com"]},{"role":"roles/containerregistry.ServiceAgent","members":["serviceAccount:service-923269802647@containerregistry.iam.gserviceaccount.com"]},{"role":"roles/datastore.owner","members":["serviceAccount:ext-delete-user-data@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/datastore.user","members":["serviceAccount:ext-firestore-send-email@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:923269802647-compute@developer.gserviceaccount.com","serviceAccount:923269802647@cloudservices.gserviceaccount.com","serviceAccount:teamwyrk@appspot.gserviceaccount.com","user:Kennychung13@gmail.com","user:ashchembu@gmail.com","user:avosburg31@gmail.com","user:calebcholm@gmail.com","user:danielfulwin@gmail.com","user:florescercadojulio@gmail.com","user:he3ers@gmail.com","user:huiru.young@gmail.com","user:jaslinevegas@yahoo.com","user:jidemobell@gmail.com","user:joanna.ciesielski@csuglobal.edu","user:jonathanmahrtguyou@gmail.com","user:karta15025452@gmail.com","user:lakshaykucheriya@gmail.com","user:likee0811@gmail.com","user:marilia.hquez@gmail.com","user:simpsonc6@winthropalumni.com","user:trankenny4@gmail.com","user:ulises.ba48@gmail.com","user:vtu7410@gmail.com","user:worthenchris7@gmail.com","user:yuejiat0416@gmail.com"]},{"role":"roles/eventarc.eventReceiver","members":["serviceAccount:923269802647-compute@developer.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-923269802647@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/firebaseappcheck.admin","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/firebasedatabase.admin","members":["serviceAccount:ext-delete-user-data@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-923269802647@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/firebasestorage.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-firebasestorage.iam.gserviceaccount.com"]},{"role":"roles/firestore.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-firestore.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:jamesikjo@gmail.com","user:rowanosmon@gmail.com","user:team@bootcamp2.com","user:villalugo96@gmail.com"]},{"role":"roles/pubsub.admin","members":["serviceAccount:ext-delete-user-data@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/pubsub.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-pubsub.iam.gserviceaccount.com"]},{"role":"roles/storage.admin","members":["serviceAccount:ext-delete-user-data@teamwyrk.iam.gserviceaccount.com","serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]}]}
[debug] {"version":1,"etag":"BwYMbWl65xo=","bindings":[{"role":"roles/artifactregistry.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-artifactregistry.iam.gserviceaccount.com"]},{"role":"roles/cloudbuild.builds.builder","members":["serviceAccount:923269802647@cloudbuild.gserviceaccount.com"]},{"role":"roles/cloudbuild.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-cloudbuild.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.admin","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.serviceAgent","members":["serviceAccount:service-923269802647@gcf-admin-robot.iam.gserviceaccount.com"]},{"role":"roles/compute.serviceAgent","members":["serviceAccount:service-923269802647@compute-system.iam.gserviceaccount.com"]},{"role":"roles/containerregistry.ServiceAgent","members":["serviceAccount:service-923269802647@containerregistry.iam.gserviceaccount.com"]},{"role":"roles/datastore.owner","members":["serviceAccount:ext-delete-user-data@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/datastore.user","members":["serviceAccount:ext-firestore-send-email@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:923269802647-compute@developer.gserviceaccount.com","serviceAccount:923269802647@cloudservices.gserviceaccount.com","serviceAccount:teamwyrk@appspot.gserviceaccount.com","user:Kennychung13@gmail.com","user:ashchembu@gmail.com","user:avosburg31@gmail.com","user:calebcholm@gmail.com","user:danielfulwin@gmail.com","user:florescercadojulio@gmail.com","user:he3ers@gmail.com","user:huiru.young@gmail.com","user:jaslinevegas@yahoo.com","user:jidemobell@gmail.com","user:joanna.ciesielski@csuglobal.edu","user:jonathanmahrtguyou@gmail.com","user:karta15025452@gmail.com","user:lakshaykucheriya@gmail.com","user:likee0811@gmail.com","user:marilia.hquez@gmail.com","user:simpsonc6@winthropalumni.com","user:trankenny4@gmail.com","user:ulises.ba48@gmail.com","user:vtu7410@gmail.com","user:worthenchris7@gmail.com","user:yuejiat0416@gmail.com"]},{"role":"roles/eventarc.eventReceiver","members":["serviceAccount:923269802647-compute@developer.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-923269802647@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/firebaseappcheck.admin","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/firebasedatabase.admin","members":["serviceAccount:ext-delete-user-data@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-923269802647@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/firebasestorage.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-firebasestorage.iam.gserviceaccount.com"]},{"role":"roles/firestore.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-firestore.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:jamesikjo@gmail.com","user:rowanosmon@gmail.com","user:team@bootcamp2.com","user:villalugo96@gmail.com"]},{"role":"roles/pubsub.admin","members":["serviceAccount:ext-delete-user-data@teamwyrk.iam.gserviceaccount.com"]},{"role":"roles/pubsub.serviceAgent","members":["serviceAccount:service-923269802647@gcp-sa-pubsub.iam.gserviceaccount.com"]},{"role":"roles/storage.admin","members":["serviceAccount:ext-delete-user-data@teamwyrk.iam.gserviceaccount.com","serviceAccount:firebase-adminsdk-uzfj6@teamwyrk.iam.gserviceaccount.com"]}]}
[info] +  extensions: Project IAM policy OK 
[debug] [2024-01-03T21:59:41.451Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email [none]
[debug] [2024-01-03T21:59:41.747Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email 200
[debug] [2024-01-03T21:59:41.747Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email {"name":"publishers/firebase/extensions/firestore-send-email","ref":"firebase/firestore-send-email","latestVersion":"0.1.30","latestVersionCreateTime":"2023-11-24T17:41:27.308571Z","state":"PUBLISHED","createTime":"2021-03-18T22:02:59.748671Z","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/extension_icons/firebase/trigger_email_120@2x.png","publisher":{"displayName":"Firebase","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/publisher_icons/firebase/firebase_128dp.png"},"repoUri":"https://github.com/firebase/extensions","metrics":{"activeInstallCount":"21700"},"latestApprovedVersion":"0.1.30"}
[debug] [2024-01-03T21:59:41.748Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email/versions/0.1.30 [none]
[debug] [2024-01-03T21:59:41.884Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email/versions/0.1.30 200
[debug] [2024-01-03T21:59:41.885Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/firestore-send-email/versions/0.1.30 {"name":"publishers/firebase/extensions/firestore-send-email/versions/0.1.30","ref":"firebase/firestore-send-email@0.1.30","spec":{"specVersion":"v1beta","name":"firestore-send-email","version":"0.1.30","description":"Composes and sends an email based on the contents of a document written to a specified Cloud Firestore collection.","roles":[{"role":"datastore.user","reason":"Allows this extension to access Cloud Firestore to read and process added email documents."}],"resources":[{"name":"processQueue","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.write\n  resource: projects/${param:PROJECT_ID}/databases/(default)/documents/${param:MAIL_COLLECTION}/{id}\nruntime: nodejs18\n","description":"Processes document changes in the specified Cloud Firestore collection, delivers emails, and updates the document with delivery status information.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Firebase","url":"https://firebase.google.com"},"contributors":[{"authorName":"Michael Bleigh","url":"https://github.com/mbleigh"},{"authorName":"Invertase","email":"oss@invertase.io","url":"https://github.com/invertase"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/firebase/extensions/blob/master/firestore-send-email/CHANGELOG.md","sourceUrl":"https://github.com/firebase/extensions/tree/master/firestore-send-email","params":[{"param":"SMTP_CONNECTION_URI","label":"SMTP connection URI","type":"STRING","description":"A URI representing an SMTP server this extension can use to deliver email. Note that port 25 is blocked by Google Cloud Platform, so we recommend using port 587 for SMTP connections. If you're using the SMTPS protocol, we recommend using port 465. In order to keep passwords secure, it is recommended to omit the password from the connection string while using the `SMTP Password` field for entering secrets and passwords. Passwords and secrets should now be included in `SMTP password` field.\nSecure format:\n `smtps://username@gmail.com@smtp.gmail.com:465` (username only)\n `smtps://smtp.gmail.com:465` (No username and password)\nBackwards Compatible (less secure):\n `smtps://username@gmail.com:password@smtp.gmail.com:465`. (username and password)","required":true,"example":"smtps://username@smtp.hostname.com:465","validationRegex":"^(smtp[s]*://(.*?(:[^:@]*)?@)?[^:@]+:[0-9]+(\\\\?[^ ]*)?)$","validationErrorMessage":"Invalid SMTP connection URI. Must be in the form `smtp(s)://username:password@hostname:port` or `smtp(s)://username@hostname:port`."},{"param":"SMTP_PASSWORD","label":"SMTP password","type":"SECRET","description":"User password for the SMTP server"},{"param":"MAIL_COLLECTION","label":"Email documents collection","type":"STRING","description":"What is the path to the collection that contains the documents used to build and send the emails?","required":true,"default":"mail","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Must be a valid Cloud Firestore collection"},{"param":"DEFAULT_FROM","label":"Default FROM address","type":"STRING","description":"The email address to use as the sender's address (if it's not specified in the added email document).  You can optionally include a name with the email address (`Friendly Firebaser <foobar@example.com>`).","required":true,"example":"foobar@example.com","validationRegex":"^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$|^.*<(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})>$","validationErrorMessage":"Must be a valid email address or valid name plus email address"},{"param":"DEFAULT_REPLY_TO","label":"Default REPLY-TO address","type":"STRING","description":"The email address to use as the reply-to address (if it's not specified in the added email document)."},{"param":"USERS_COLLECTION","label":"Users collection","type":"STRING","description":"A collection of documents keyed by user UID. If the `toUids`, `ccUids`, and/or `bccUids` recipient options are used in the added email document, this extension delivers email to the `email` field based on lookups in this collection."},{"param":"TEMPLATES_COLLECTION","label":"Templates collection","type":"STRING","description":"A collection of email templates keyed by name. This extension can render an email using a [Handlebar](https://handlebarsjs.com/) template, if the template is specified in the added email document."},{"param":"TTL_EXPIRE_TYPE","label":"Firestore TTL type","type":"SELECT","description":"Do you want the firestore records to be marked with an expireAt field for a TTL policy? If \"Never\" is selected then no expireAt field will be added. Otherwise you may specify the unit of time specified by the TTL_EXPIRE_VALUE parameter. Defaults to \"Never\".","required":true,"options":[{"value":"never","label":"Never"},{"value":"hour","label":"Hour"},{"value":"day","label":"Day"},{"value":"week","label":"Week"},{"value":"month","label":"Month"},{"value":"year","label":"Year"}],"default":"never"},{"param":"TTL_EXPIRE_VALUE","label":"Firestore TTL value","type":"STRING","description":"In the units specified by TTL_EXPIRE_TYPE, how long do you want records to be ineligible for deletion by a TTL policy? This parameter requires the Firestore TTL type parameter to be set to a value other than `Never`. For example, if `Firestore TTL type` is set to `Day` then setting this parameter to `1` will specify a TTL of 1 day.","required":true,"default":"1","validationRegex":"^[1-9][0-9]*$","validationErrorMessage":"The value must be an integer value greater than zero."},{"param":"TLS_OPTIONS","label":"TLS Options","type":"STRING","description":"A JSON value representing TLS options. For more information, see https://nodejs.org/api/tls.html#tls_class_tls_tlssocket"}],"preinstallContent":"Use this extension to render and send emails that contain the information from documents added to a specified Cloud Firestore collection.\n\nAdding a document triggers this extension to send an email built from the document's fields. The document's top-level fields specify the email sender and recipients, including `to`, `cc`, and `bcc` options (each supporting UIDs). The document's `message` field specifies the other email elements, like subject line and email body (either plaintext or HTML)\n\nHere's a basic example document write that would trigger this extension:\n\n```js\nadmin.firestore().collection('mail').add({\n  to: 'someone@example.com',\n  message: {\n    subject: 'Hello from Firebase!',\n    html: 'This is an <code>HTML</code> email body.',\n  },\n})\n```\n\nYou can also optionally configure this extension to render emails using [Handlebar](https://handlebarsjs.com/) templates. Each template is a document stored in a Cloud Firestore collection.\n\nWhen you configure this extension, you'll need to supply your **SMTP credentials for mail delivery**. Note that this extension is for use with bulk email service providers, like SendGrid, Mailgun, etc.\n\n#### Setup Google App Passwords\n\n**Google** no longer allows **Gmail** users to use their own passwords to authorize third-party apps and services. Instead, you have to use the [Sign in with App Passwords](https://support.google.com/accounts/answer/185833) service to generate a special password for each app you want to authorize. To do so:\n\n1.  Go to your [Google Account](https://myaccount.google.com/).\n2.  Select **Security**.\n3.  Under \"Signing in to Google,\" select **App Passwords**. You may need to sign in. If you don’t have this option, it might be because:\n    1.  2-Step Verification is not set up for your account.\n    2.  2-Step Verification is only set up for security keys.\n    3.  Your account is through work, school, or other organization.\n    4.  You turned on Advanced Protection.\n4.  At the bottom, choose **Select app** and choose **Other** option and then write the name of the app password (e.g. `Firebase Trigger Email from Firestore Extension`) and click **Generate**.\n5.  Follow the instructions to enter the App Password. The App Password is the 16-character code in the yellow bar on your device.\n6.  Tap **Done**.\n\nNow you can use your Google username with the generated password to authorize the extension.\n\n#### Setup Hotmail Passwords\n\nTo use your Outlook/Hotmail email account with this extension, you'll need to have 2FA enabled on your account, and [Create an App Password](https://support.microsoft.com/en-us/help/12409/microsoft-account-app-passwords-and-two-step-verification).\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've [set up a Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) in your Firebase project.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n  - Cloud Firestore\n  - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n\nUsage of this extension also requires you to have SMTP credentials for mail delivery. You are responsible for any associated costs with your usage of your SMTP provider.\n\n#### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)","postinstallContent":"### See it in action\n\nYou can test out this extension right away!\n\n1.  Go to your [Cloud Firestore dashboard](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/data) in the Firebase console.\n\n1.  If it doesn't already exist, create the collection you specified during installation: `${param:MAIL_COLLECTION}`.\n\n1.  Add a document with a `to` field and a `message` field with the following content:\n\n    ```js\n    to: ['someone@example.com'],\n    message: {\n      subject: 'Hello from Firebase!',\n      text: 'This is the plaintext section of the email body.',\n      html: 'This is the <code>HTML</code> section of the email body.',\n    }\n    ```\n\n1.  In a few seconds, you'll see a `delivery` field appear in the document. The field will update as the extension processes the email.\n\n**Note:** You can also use the [Firebase Admin SDK][admin_sdk] to add a document:\n\n```js\nadmin\n  .firestore()\n  .collection(\"${param:MAIL_COLLECTION}\")\n  .add({\n    to: \"someone@example.com\",\n    message: {\n      subject: \"Hello from Firebase!\",\n      text: \"This is the plaintext section of the email body.\",\n      html: \"This is the <code>HTML</code> section of the email body.\",\n    },\n  })\n  .then(() => console.log(\"Queued email for delivery!\"));\n```\n\n### Using this extension\n\nSee the [official documentation](https://firebase.google.com/docs/extensions/official/firestore-send-email) for information on using this extension, including advanced use cases such as using Handlebars templates and managing email delivery status.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\n[mail_collection]: https://console.firebase.google.com/project/_/firestore/data~2F${param:MAIL_COLLECTION}\n[admin_sdk]: https://firebase.google.com/docs/admin/setup\n[amp4email]: https://amp.dev/documentation/guides-and-tutorials/learn/email-spec/amp-email-format/\n[handlebars]: https://handlebarsjs.com/\n\n### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)","readmeContent":"# Trigger Email from Firestore\n\n**Author**: Firebase (**[https://firebase.google.com](https://firebase.google.com)**)\n\n**Description**: Composes and sends an email based on the contents of a document written to a specified Cloud Firestore collection.\n\n\n\n**Details**: Use this extension to render and send emails that contain the information from documents added to a specified Cloud Firestore collection.\n\nAdding a document triggers this extension to send an email built from the document's fields. The document's top-level fields specify the email sender and recipients, including `to`, `cc`, and `bcc` options (each supporting UIDs). The document's `message` field specifies the other email elements, like subject line and email body (either plaintext or HTML)\n\nHere's a basic example document write that would trigger this extension:\n\n```js\nadmin.firestore().collection('mail').add({\n  to: 'someone@example.com',\n  message: {\n    subject: 'Hello from Firebase!',\n    html: 'This is an <code>HTML</code> email body.',\n  },\n})\n```\n\nYou can also optionally configure this extension to render emails using [Handlebar](https://handlebarsjs.com/) templates. Each template is a document stored in a Cloud Firestore collection.\n\nWhen you configure this extension, you'll need to supply your **SMTP credentials for mail delivery**. Note that this extension is for use with bulk email service providers, like SendGrid, Mailgun, etc.\n\n#### Setup Google App Passwords\n\n**Google** no longer allows **Gmail** users to use their own passwords to authorize third-party apps and services. Instead, you have to use the [Sign in with App Passwords](https://support.google.com/accounts/answer/185833) service to generate a special password for each app you want to authorize. To do so:\n\n1.  Go to your [Google Account](https://myaccount.google.com/).\n2.  Select **Security**.\n3.  Under \"Signing in to Google,\" select **App Passwords**. You may need to sign in. If you don’t have this option, it might be because:\n    1.  2-Step Verification is not set up for your account.\n    2.  2-Step Verification is only set up for security keys.\n    3.  Your account is through work, school, or other organization.\n    4.  You turned on Advanced Protection.\n4.  At the bottom, choose **Select app** and choose **Other** option and then write the name of the app password (e.g. `Firebase Trigger Email from Firestore Extension`) and click **Generate**.\n5.  Follow the instructions to enter the App Password. The App Password is the 16-character code in the yellow bar on your device.\n6.  Tap **Done**.\n\nNow you can use your Google username with the generated password to authorize the extension.\n\n#### Setup Hotmail Passwords\n\nTo use your Outlook/Hotmail email account with this extension, you'll need to have 2FA enabled on your account, and [Create an App Password](https://support.microsoft.com/en-us/help/12409/microsoft-account-app-passwords-and-two-step-verification).\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've [set up a Cloud Firestore database](https://firebase.google.com/docs/firestore/quickstart) in your Firebase project.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n  - Cloud Firestore\n  - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n\nUsage of this extension also requires you to have SMTP credentials for mail delivery. You are responsible for any associated costs with your usage of your SMTP provider.\n\n#### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Sending Emails Using Firestore And Firebase Extensions](https://invertase.link/Y6Nu)\n\n\n\n**Configuration Parameters:**\n\n* SMTP connection URI: A URI representing an SMTP server this extension can use to deliver email. Note that port 25 is blocked by Google Cloud Platform, so we recommend using port 587 for SMTP connections. If you're using the SMTPS protocol, we recommend using port 465. In order to keep passwords secure, it is recommended to omit the password from the connection string while using the `SMTP Password` field for entering secrets and passwords. Passwords and secrets should now be included in `SMTP password` field.\nSecure format:\n `smtps://username@gmail.com@smtp.gmail.com:465` (username only)\n `smtps://smtp.gmail.com:465` (No username and password)\nBackwards Compatible (less secure):\n `smtps://username@gmail.com:password@smtp.gmail.com:465`. (username and password)\n\n* SMTP password: User password for the SMTP server\n\n* Email documents collection: What is the path to the collection that contains the documents used to build and send the emails?\n\n* Default FROM address: The email address to use as the sender's address (if it's not specified in the added email document).  You can optionally include a name with the email address (`Friendly Firebaser <foobar@example.com>`).\n\n* Default REPLY-TO address: The email address to use as the reply-to address (if it's not specified in the added email document).\n\n* Users collection: A collection of documents keyed by user UID. If the `toUids`, `ccUids`, and/or `bccUids` recipient options are used in the added email document, this extension delivers email to the `email` field based on lookups in this collection.\n\n* Templates collection: A collection of email templates keyed by name. This extension can render an email using a [Handlebar](https://handlebarsjs.com/) template, if the template is specified in the added email document.\n\n* Firestore TTL type: Do you want the firestore records to be marked with an expireAt field for a TTL policy? If \"Never\" is selected then no expireAt field will be added. Otherwise you may specify the unit of time specified by the TTL_EXPIRE_VALUE parameter. Defaults to \"Never\".\n\n* Firestore TTL value: In the units specified by TTL_EXPIRE_TYPE, how long do you want records to be ineligible for deletion by a TTL policy? This parameter requires the Firestore TTL type parameter to be set to a value other than `Never`. For example, if `Firestore TTL type` is set to `Day` then setting this parameter to `1` will specify a TTL of 1 day.\n\n\n\n**Cloud Functions:**\n\n* **processQueue:** Processes document changes in the specified Cloud Firestore collection, delivers emails, and updates the document with delivery status information.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* datastore.user (Reason: Allows this extension to access Cloud Firestore to read and process added email documents.)\n","displayName":"Trigger Email from Firestore","events":[{"type":"firebase.extensions.firestore-send-email.v1.onStart","description":"Occurs when the extension starts execution."},{"type":"firebase.extensions.firestore-send-email.v1.onProcessing","description":"Occurs when the extension attempts to process an email."},{"type":"firebase.extensions.firestore-send-email.v1.onRetry","description":"Occurs when the extension attempts to resend an email."},{"type":"firebase.extensions.firestore-send-email.v1.onPending","description":"Occurs when an email has a pending status."},{"type":"firebase.extensions.firestore-send-email.v1.onSuccess","description":"Occurs when the extension successfully sends an email."},{"type":"firebase.extensions.firestore-send-email.v1.onComplete","description":"Occurs when the extension completes execution."},{"type":"firebase.extensions.firestore-send-email.v1.onError","description":"Occurs when the extension fails to complete execution."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/location","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east1","label":"Taiwan (asia-east1)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast1","label":"Singapore (asia-southeast1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"af851d93fde847500b536528b070d0a5f9f8666d356a5bc7e38a78092347797e","createTime":"2023-11-24T17:41:27.308571Z","sourceDownloadUri":"https://storage.googleapis.com/firebase-mod-sources-prod/af851d93fde847500b536528b070d0a5f9f8666d356a5bc7e38a78092347797e","id":"0.1.30","releaseNotes":"feature - add a new field \"Tls Options\" to allow users to specify TLS options for SMTP connections\n","buildSourceUri":"https://github.com/firebase/extensions/tree/007819b4a72daf6784fbdd3f13cce27b1df57ca1","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"800"},"extensionRoot":"firestore-send-email"}
[debug] [2024-01-03T21:59:41.890Z] >>> [apiv2][query] GET https://iam.googleapis.com/v1/roles/secretmanager.secretAccessor [none]
[debug] [2024-01-03T21:59:41.892Z] >>> [apiv2][query] GET https://iam.googleapis.com/v1/roles/datastore.user [none]
[debug] [2024-01-03T21:59:42.377Z] <<< [apiv2][status] GET https://iam.googleapis.com/v1/roles/secretmanager.secretAccessor 200
[debug] [2024-01-03T21:59:42.378Z] <<< [apiv2][body] GET https://iam.googleapis.com/v1/roles/secretmanager.secretAccessor {"name":"roles/secretmanager.secretAccessor","title":"Secret Manager Secret Accessor","description":"Allows accessing the payload of secrets.","includedPermissions":["resourcemanager.projects.get","resourcemanager.projects.list","secretmanager.versions.access"],"stage":"GA","etag":"AA=="}
[debug] [2024-01-03T21:59:42.520Z] <<< [apiv2][status] GET https://iam.googleapis.com/v1/roles/datastore.user 200
[debug] [2024-01-03T21:59:42.521Z] <<< [apiv2][body] GET https://iam.googleapis.com/v1/roles/datastore.user {"name":"roles/datastore.user","title":"Cloud Datastore User","description":"Provides read/write access to data in a Cloud Datastore database. Intended for application developers and service accounts.","includedPermissions":["appengine.applications.get","datastore.databases.get","datastore.databases.getMetadata","datastore.databases.list","datastore.entities.allocateIds","datastore.entities.create","datastore.entities.delete","datastore.entities.get","datastore.entities.list","datastore.entities.update","datastore.indexes.list","datastore.namespaces.get","datastore.namespaces.list","datastore.statistics.get","datastore.statistics.list","resourcemanager.projects.get","resourcemanager.projects.list"],"stage":"GA","etag":"AA=="}
[info] 
Extension: Trigger Email from Firestore (firebase/firestore-send-email)
Description: Composes and sends an email based on the contents of a document written to a specified Cloud Firestore collection.
Version: 0.1.30 - Latest
Review status: Accepted
View in Extensions Hub: https://extensions.dev/extensions/firebase/firestore-send-email
Source in GitHub: https://github.com/firebase/extensions/tree/007819b4a72daf6784fbdd3f13cce27b1df57ca1/firestore-send-email
License: Apache-2.0
Resources created:
  - processQueue (Cloud Function (1st gen)): Processes document changes in the specified Cloud Firestore collection, delivers emails, and updates the document with delivery status information.
  - SMTP_PASSWORD (Cloud Secret Manager secret)
Events emitted:
  - firebase.extensions.firestore-send-email.v1.onStart: Occurs when the extension starts execution.
  - firebase.extensions.firestore-send-email.v1.onProcessing: Occurs when the extension attempts to process an email.
  - firebase.extensions.firestore-send-email.v1.onRetry: Occurs when the extension attempts to resend an email.
  - firebase.extensions.firestore-send-email.v1.onPending: Occurs when an email has a pending status.
  - firebase.extensions.firestore-send-email.v1.onSuccess: Occurs when the extension successfully sends an email.
  - firebase.extensions.firestore-send-email.v1.onComplete: Occurs when the extension completes execution.
  - firebase.extensions.firestore-send-email.v1.onError: Occurs when the extension fails to complete execution.
Roles granted:
  - Secret Manager Secret Accessor: Allows accessing the payload of secrets.
  - Cloud Datastore User: Provides read/write access to data in a Cloud Datastore database. Intended for application developers and service accounts.
[info] 
[info] i  extensions: ensuring required API secretmanager.googleapis.com is enabled... 
[debug] [2024-01-03T22:00:10.559Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/teamwyrk/services/secretmanager.googleapis.com [none]
[debug] [2024-01-03T22:00:10.559Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/teamwyrk/services/secretmanager.googleapis.com x-goog-quota-user=projects/teamwyrk
[debug] [2024-01-03T22:00:11.045Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/teamwyrk/services/secretmanager.googleapis.com 200
[debug] [2024-01-03T22:00:11.045Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/teamwyrk/services/secretmanager.googleapis.com [omitted]
[info] +  extensions: required API secretmanager.googleapis.com is enabled 
[debug] [2024-01-03T22:00:11.048Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/teamwyrk/adminSdkConfig [none]
[debug] [2024-01-03T22:00:11.382Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/teamwyrk/adminSdkConfig 200
[debug] [2024-01-03T22:00:11.382Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/teamwyrk/adminSdkConfig {"projectId":"teamwyrk","storageBucket":"teamwyrk.appspot.com","locationId":"us-central"}
[debug] [2024-01-03T22:00:11.383Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/teamwyrk [none]
[debug] [2024-01-03T22:00:11.524Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/teamwyrk 200
[debug] [2024-01-03T22:00:11.525Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/teamwyrk {"projectId":"teamwyrk","projectNumber":"923269802647","displayName":"Teamwyrk","name":"projects/teamwyrk","resources":{"hostingSite":"teamwyrk","storageBucket":"teamwyrk.appspot.com","locationId":"us-central"},"state":"ACTIVE","etag":"1_6ccde656-e9f5-4771-838c-10cd36df7e61"}
[info] i  extensions: answer the questions below to configure your extension: 
[info] 
SMTP connection URI: A URI representing an SMTP server this extension can use to deliver email. Note that port 25 is blocked by Google Cloud Platform, so we recommend using port 587 for SMTP connections. If you're using the SMTPS protocol, we recommend using port 465. In order to keep passwords secure, it is recommended to omit the password from the connection string while using the SMTP Password field for entering secrets and passwords. Passwords and secrets should now be included in SMTP password field.
Secure format:
 smtps://username@gmail.com@smtp.gmail.com:465 (username only)
 smtps://smtp.gmail.com:465 (No username and password)
Backwards Compatible (less secure):
 smtps://username@gmail.com:password@smtp.gmail.com:465. (username and password)
